// Operators
// Арифметические + - * /
// Сравнения === !== <= >=
// Логические ! (не) && (и) || (или)
// Присваивание =
// Текстовые typeof instanceof new delete
// ---------------------------------------
// Унарные операторы:
// а++ (увеличивает значение на 1) 
// +а (конвертирует напр. строку в число)
// delete obj.a
// typeof a
// new Object()
// ---------------------------------------
// Бинарные операторы:
// а = 5
// a + b
// a += 4
// a === b
// a && b
// ---------------------------------------
// Инфиксная запись (оператор стоит между операндами):
// а = true
// a + b
// a += b 
// etc.
// ---------------------------------------
// Префиксаня запись (оператор стоит перед операндом):
// ++а
// delete obj.a
// ---------------------------------------
// Постфиксная запись (оператор идёт за операндом):
// а++
// myFunction()
// ---------------------------------------
// Приоритетность операторов: все как и в математике.
// ---------------------------------------
// Логические:
// ! возвращает значение типа boolean
// && || возвращают значение одного из операндов
// ---------------------------------------
// Ложные значение - это значения, которые при приведение к
// логическому типу, дают false
// false, '', 0, undefined, null
// console.log(Boolean(0))
// ---------------------------------------
// Оператор ! (возвращает true, если значение оператора false)
// !10, !0, !'abc', !''
// ---------------------------------------
// Оператор !! (возвращает true, если значение оператора true)
// !! - отицание отрицания
// ---------------------------------------
// Оператор &&:
// expression1 && expression 2
// Если выражение №1 ложно, то выражение №2 игнорируется и
// результатом этого выражания будет результат выражения №1
// 
// Если выражение №1 истинно, то оцениваем выражение №2. Если
// оно ложно, то возвращаем результат выражения №2, так же как
// и в случае, если второе выражение истинное
// ---------------------------------------
// Оператор ||:
// expression1 && expression 2
// Если выражение №1 истинно, то выражение №2 игнорируется
// и результатом этого выражения будет результат выражения №1
// 
// Если выражение №1 ложно, а выражение №2 истинно, то 
// возвращаем результат выражения №2
// 
// Если оба выражения ложные, то возвращается результат №2
// ---------------------------------------
// Цепочка операторов:
// a && b && c && d
// a || b || c || d
// Принцип тот же, что и у простых выражений
// ---------------------------------------
// Опертор разделения объекта на свойста (...)
const button = {
    width: 200,
    text: "Buy"
}

const redButton = {
    ...button,
    color: "red"
}
// ... как бы распаковывает все свойства button для их использования
// в новом объекте redButton
// console.table(redButton)
// 
// Можно объединять таким образом несколько объектов в один
const buttonInfo = {
    text: "Buy",
}

const buttonStyle = {
    color: "green",
    width: 200,
    height: 300
}

const newButton = {
    ...buttonInfo,
    ...buttonStyle
}

// Если у обоих классов есть одинаковые свойства, то останется то, которое указано
// в нижнем классе (в данном случае buttonStyle)
// console.table(newButton)

// Конкатенация строк
// "Hello " + "world" (Все как в Python)

// Шаблонные строки (вроде f-strings)
const hello = "Hello"
const world = "World"
const greeting = `${hello} ${world}`
